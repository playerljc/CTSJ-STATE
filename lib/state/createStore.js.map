{"version":3,"file":"createStore.js","sources":["state/createStore.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nrequire(\"core-js/modules/es.array.for-each\");\n\nrequire(\"core-js/modules/es.array.index-of\");\n\nrequire(\"core-js/modules/es.array.splice\");\n\nrequire(\"core-js/modules/es.function.bind\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.promise\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\n/**\n * trigger\n * @access private\n */\nfunction trigger(action) {\n  var listeners = this.listeners;\n  listeners.forEach(function (ins) {\n    ins(action);\n  });\n}\n/**\n * Store - 数据的仓库\n * @class Store\n * @classdesc 数据的仓库\n */\n\n\nvar Store = /*#__PURE__*/function () {\n  /**\n   * constrcutor - Store的构造方法\n   * @param {Object} - reducer - Reducer实例\n   * @param {Object | Array} - preloadedState - Store的默认值\n   * @param {Array} - middlewares - 中间件\n   */\n  function Store(reducer) {\n    var _this = this;\n\n    var preloadedState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var middlewares = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    (0, _classCallCheck2[\"default\"])(this, Store);\n\n    // reducer处理\n    this.reducer = reducer || function (state) {\n      return state;\n    }; // 用缺省值初始化store的数据\n\n\n    this.state = Object.assign({}, preloadedState); // 所有的中间件\n\n    this.middlewares = middlewares || []; // 给每一个middleware赋值store\n\n    this.middlewares.forEach(function (m) {\n      m.setStore(_this);\n    }); // 对store更新进行订阅(subscribe)的句柄\n\n    this.listeners = [];\n  }\n  /**\n   * getState - 获取store的数据\n   * @return {Object}\n   */\n\n\n  (0, _createClass2[\"default\"])(Store, [{\n    key: \"getState\",\n    value: function getState() {\n      return this.state;\n    }\n    /**\n     * runBeforeMiddleWares - 执行所有中间件的before\n     * @param action - dispatch的action\n     * @return {Promise<state>}\n     */\n\n  }, {\n    key: \"runBeforeMiddleWares\",\n    value: function runBeforeMiddleWares(action) {\n      var _this2 = this;\n\n      return new Promise(function (resolveParent, rejectParent) {\n        // 从后往前执行middleWares\n        var index = _this2.middlewares.length - 1;\n        /**\n         * 执行一次middleWare的runBefore\n         * @return {Promise}\n         */\n\n        var next = function next() {\n          return new Promise(function (resolve, reject) {\n            // 所有的middleWare都执行完了\n            if (index < 0) {\n              resolve();\n            } else {\n              // 取出一个middle\n              var middleware = _this2.middlewares[index--]; // 执行middleWare的before\n\n              middleware.before({\n                // 传入的是整个数据\n                state: _this2.state,\n                action: action\n              }).then(function ()\n              /* state */\n              {\n                // cloneState = state;\n                // 继续向前执行middleWare\n                next().then(function () {\n                  resolve();\n                });\n              })[\"catch\"](function (error) {\n                reject(error);\n              });\n            }\n          });\n        }; // 执行一次middleWare的runBefore\n\n\n        next().then(function () {\n          resolveParent();\n        })[\"catch\"](function (error) {\n          rejectParent(error);\n        });\n      });\n    }\n    /**\n     * runAfterMiddleWares - 运行所有中间件的after\n     * @param action - dispatch的action\n     * @return {Promise<state>}\n     */\n\n  }, {\n    key: \"runAfterMiddleWares\",\n    value: function runAfterMiddleWares(action) {\n      var _this3 = this;\n\n      return new Promise(function (resolveParent, rejectParent) {\n        var index = 0;\n\n        var next = function next() {\n          return new Promise(function (resolve, reject) {\n            if (index >= _this3.middlewares.length) {\n              resolve();\n            } else {\n              var middleware = _this3.middlewares[index++];\n              middleware.after({\n                // 传入的是整个数据\n                state: _this3.state,\n                action: action\n              }).then(function () {\n                next().then(function () {\n                  resolve();\n                });\n              })[\"catch\"](function (error) {\n                reject(error);\n              });\n            }\n          });\n        };\n\n        next().then(function () {\n          resolveParent();\n        })[\"catch\"](function (error) {\n          rejectParent(error);\n        });\n      });\n    }\n    /**\n     * dispatch - 进行数据的修改\n     * @param {Object | Function} - action\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this4 = this;\n\n      if (action instanceof Function) {\n        action(this.dispatch.bind(this));\n      } // 如果存在中间件\n      else if (this.middlewares.length) {\n          // 如果有middleWares\n          // before 执行所有的middleWare的before\n          this.runBeforeMiddleWares(action).then(function () {\n            // before的时候去掉action中的success\n            var success = action.success,\n                filterAction = (0, _objectWithoutProperties2[\"default\"])(action, [\"success\"]);\n            trigger.call(_this4, filterAction); // detail 执行所有的Reducer\n\n            _this4.state = _this4.reducer(_this4.state, action); // after 执行所有的middleWare的after\n\n            _this4.runAfterMiddleWares(action).then(function () {\n              trigger.call(_this4, action);\n            });\n          });\n        } else {\n          // 如果没有middleWares\n          // 执行所有的Reducer\n          this.state = this.reducer(this.state, action);\n          trigger.call(this, action);\n        }\n    }\n    /**\n     * subscribe - 对store数据更改的监听\n     * @param {Function} - listener\n     * @return {Function} - 删除该句柄的方法\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(listener) {\n      var _this5 = this;\n\n      this.listeners.push(listener);\n      return function () {\n        var index = _this5.listeners.indexOf(listener);\n\n        if (index !== -1) {\n          _this5.listeners.splice(index, 1);\n        }\n      };\n    }\n  }]);\n  return Store;\n}();\n/**\n * createStore - 创建一个Store\n * @param {Object} - reducer - Reducer实例\n * @param {Object | Array} - preloadedState - store的默认值\n * @param {Array} - middlewares - 中间件\n * @return {Store}\n */\n\n\nvar _default = function _default(reducer, preloadedState, middlewares) {\n  return new Store(reducer, preloadedState, middlewares);\n};\n\nexports[\"default\"] = _default;"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_objectWithoutProperties2","_classCallCheck2","_createClass2","trigger","action","this","listeners","forEach","ins","Store","reducer","_this","preloadedState","arguments","length","undefined","middlewares","state","assign","m","setStore","key","_this2","Promise","resolveParent","rejectParent","index","next","resolve","reject","before","then","error","_this3","after","_this4","Function","dispatch","bind","runBeforeMiddleWares","success","filterAction","call","runAfterMiddleWares","listener","_this5","push","indexOf","splice","_default"],"mappings":"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"}