{"version":3,"file":"serviceregister.js","sources":["middleware/saga/serviceregister.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.for-each\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"../../react\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar sage;\nvar Config;\n/**\n * ServiceRegister\n * @class ServiceRegister\n * @classdesc 服务的注册\n * 1.自动生成数据流的mapDispatchToProps映射\n * 2.自动生成数据流的mapStateToProps映射\n * 3.自动生成数据流的Model\n */\n\nvar _default = {\n  /**\n   * initConfig - 服务注册初始化\n   * @param {Object} - config\n   * - namespace: service的实例\n   * property: model的namespace，也可以理解为模块名称\n   * value: value为Service的实例对象\n   */\n  initConfig: function initConfig(config) {\n    Config = config;\n  },\n\n  /**\n   * setSage - 设置Sage实例\n   * @param ins Sage\n   */\n  setSage: function setSage(ins) {\n    sage = ins;\n  },\n\n  /**\n   * mapStateToProps - 自动生成mapStateToProps\n   * @param {Array} - namespaces\n   * @param {Object} - state 数据流的数据\n   * @return {Object} - mapStateToProps的映射\n   * 映射namespace到Props\n   * 映射loading到Props\n   */\n  mapStateToProps: function mapStateToProps(_ref) {\n    var namespaces = _ref.namespaces,\n        state = _ref.state;\n    var props = {\n      // [namespace]: state[namespace],\n      loading: state.loading\n      /* .global */\n\n    };\n\n    if (namespaces && namespaces.length) {\n      namespaces.forEach(function (namespace) {\n        props[namespace] = state[namespace];\n      });\n    }\n\n    return props;\n  },\n\n  /**\n   * mapDispatchToProps - 自动生成mapDispatchToProps\n   * @param {Array<String>} - namespaces - 模块的集合\n   * @param {Function} - dispatch\n   * @return {Object} - mapDispatchToProps映射\n   */\n  mapDispatchToProps: function mapDispatchToProps(_ref2) {\n    var namespaces = _ref2.namespaces,\n        dispatch = _ref2.dispatch;\n    // service的实例\n    var mapDispatchToProps = {};\n    var keys = [];\n\n    if (!namespaces || !namespaces.length) {\n      // 如果不传递模块集合或者模块集合为空数组，则生成所有Service的方法隐射\n      keys = Object.keys(Config);\n    } else {\n      keys = namespaces;\n    }\n\n    keys.forEach(function (namespace) {\n      var Service = Config[namespace];\n      Object.keys(Service).forEach(function (key) {\n        if (key !== 'default') {\n          // methodName是namespace + 接口方法名首字母大写\n          // 例子 namespace是todolist Service中有fetchList接口\n          // 则方法名为todolistFetchList\n          var methodName = \"\".concat(namespace).concat(key.charAt(0).toUpperCase()).concat(key.substring(1));\n          var type = \"\".concat(namespace, \"/\").concat(key); // params必须是对象且只有一个对象\n\n          mapDispatchToProps[methodName] = function (params) {\n            return dispatch(_objectSpread({\n              type: type\n            }, params));\n          };\n        }\n      });\n    });\n    return mapDispatchToProps;\n  },\n\n  /**\n   * model - 生成Service对应的Model\n   * @param {String} - namespace\n   * @return {Object} - Model\n   * 此方默认处理Service中的所有接口，默认生成的Effect只调用接口，\n   * 把接口返回值注入到以方法名为Key，返回的dataKey为数据的数据流中，且在model的namespace键中创建\n   * 例如：\n   * 假定model的namsespace为todolist\n   * Service中有ferchList方法\n   * Model的处理为\n   * 1.调用fetchList\n   * 2.将返回值放入 {\n   *    todolist:{\n   *      fetchList: 数据\n   *    }\n   * }\n   */\n  model: function model(namespace) {\n    // service的实例\n    var Service = Config[namespace];\n    var keys = Object.keys(Service);\n    var defaultState = {};\n    keys.forEach(function (key) {\n      if (key !== 'default') {\n        defaultState[key] = Service[key].defaultResult();\n      }\n    }); // 模型\n\n    var model = {\n      // namespace\n      namespace: namespace,\n      // effects\n      effects: {},\n      state: _objectSpread({}, defaultState),\n      getDefaultState: function getDefaultState() {\n        return _objectSpread({}, defaultState);\n      },\n      // reducers\n      reducers: {\n        receive: function receive(state, _ref3) {\n          var payload = _ref3.payload;\n          return _objectSpread(_objectSpread({}, state), payload);\n        }\n      }\n    }; // 所有除了default\n\n    keys.forEach(function (key) {\n      if (key !== 'default') {\n        // params是调用mapDispatchToProps的参数\n        // success是回调函数\n        model.effects[key] = /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params, _ref4) {\n          var call, put, response, _Service$default, codeKey, codeSuccessKey, dataKey;\n\n          return _regenerator[\"default\"].wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  call = _ref4.call, put = _ref4.put;\n                  _context.next = 3;\n                  return call(Service[key].call, params);\n\n                case 3:\n                  response = _context.sent;\n                  // console.log('CTSJ-STATE----',response);\n                  // Service中的默认导出必须有的键\n                  // codeKey为状态域\n                  // codeSuccessKey为状态域中成功标识\n                  // dataKey为数据域\n                  _Service$default = Service[\"default\"], codeKey = _Service$default.codeKey, codeSuccessKey = _Service$default.codeSuccessKey, dataKey = _Service$default.dataKey; // console.log('CTSJ-STATE----',codeKey, codeSuccessKey, dataKey);\n                  // console.log({ [key]: response[dataKey] });\n                  // console.log(response[codeKey] === codeSuccessKey);\n\n                  if (!(response[codeKey] === codeSuccessKey)) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return put({\n                    type: 'receive',\n                    payload: (0, _defineProperty2[\"default\"])({}, key, response[dataKey])\n                  });\n\n                case 8:\n                  return _context.abrupt(\"return\", response);\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        });\n      }\n    });\n    return model;\n  },\n\n  /**\n   * 加入自动清除的connect\n   * @param serviceName\n   * @return {function(*=, *=): function(*=): *}\n   */\n  connect: function connect(serviceNames) {\n    var clearGroup = serviceNames.map(function (serviceName) {\n      var model = sage.getModel(serviceName);\n      var defaultState = model && 'getDefaultState' in model ? model.getDefaultState() : {};\n      return {\n        type: \"\".concat(serviceName, \"/receive\"),\n        defaultState: defaultState\n      };\n    });\n    return function (mapStateToProps, mapDispatchToProps) {\n      return function (Component) {\n        return (0, _react.connect)(mapStateToProps, mapDispatchToProps)(Component, {\n          isClear: true,\n          clearGroup: clearGroup\n        });\n      };\n    };\n  }\n};\nexports[\"default\"] = _default;"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_regenerator","sage","Config","_defineProperty2","_react","ownKeys","object","enumerableOnly","symbols","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","_default","initConfig","config","setSage","ins","mapStateToProps","_ref","namespaces","state","props","loading","namespace","mapDispatchToProps","_ref2","dispatch","Service","methodName","type","concat","charAt","toUpperCase","substring","params","model","defaultState","defaultResult","effects","getDefaultState","reducers","receive","_ref3","payload","mark","_callee","_ref4","put","response","codeKey","codeSuccessKey","dataKey","wrap","_context","prev","next","call","sent","_Service$default","abrupt","stop","connect","serviceNames","clearGroup","map","serviceName","getModel","Component","isClear"],"mappings":"aAEA,IAAIA,uBAAyBC,QAAQ,gDAErCA,QAAQ,mCAERA,QAAQ,qCAERA,QAAQ,gCAERA,QAAQ,kCAERA,QAAQ,gDAERC,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,OAAO,IAETD,QAAiB,aAAI,EAErB,IAAIE,aAAeN,uBAAuBC,QAAQ,+BAElDA,QAAQ,+BAER,IAQIM,KACAC,OATAC,iBAAmBT,uBAAuBC,QAAQ,0CAElDS,OAAST,QAAQ,eAErB,SAASU,QAAQC,EAAQC,GAAkB,IAAwEC,EAApEC,EAAOb,OAAOa,KAAKH,GAAqQ,OAAxPV,OAAOc,wBAA6BF,EAAUZ,OAAOc,sBAAsBJ,GAAaC,IAAgBC,EAAUA,EAAQG,OAAO,SAAUC,GAAO,OAAOhB,OAAOiB,yBAAyBP,EAAQM,GAAKE,cAAgBL,EAAKM,KAAKC,MAAMP,EAAMD,IAAmBC,EAE9U,SAASQ,cAAcC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAAQA,EAAI,EAAKd,QAAQT,OAAO0B,IAAS,GAAMC,QAAQ,SAAUC,IAAO,EAAIrB,iBAA0B,SAAGe,EAAQM,EAAKF,EAAOE,MAAsB5B,OAAO6B,0BAA6B7B,OAAO8B,iBAAiBR,EAAQtB,OAAO6B,0BAA0BH,IAAmBjB,QAAQT,OAAO0B,IAASC,QAAQ,SAAUC,GAAO5B,OAAOC,eAAeqB,EAAQM,EAAK5B,OAAOiB,yBAAyBS,EAAQE,MAAe,OAAON,EAa9hB,IAAIS,SAAW,CAQbC,WAAY,SAAoBC,GAC9B3B,OAAS2B,GAOXC,QAAS,SAAiBC,GACxB9B,KAAO8B,GAWTC,gBAAiB,SAAyBC,GACxC,IAAIC,EAAaD,EAAKC,WAClBC,EAAQF,EAAKE,MACbC,EAAQ,CAEVC,QAASF,EAAME,SAWjB,OANIH,GAAcA,EAAWb,QAC3Ba,EAAWX,QAAQ,SAAUe,GAC3BF,EAAME,GAAaH,EAAMG,KAItBF,GASTG,mBAAoB,SAA4BC,GAC9C,IAAIN,EAAaM,EAAMN,WACnBO,EAAWD,EAAMC,SAEjBF,EAAqB,GA4BzB,OAzBKL,GAAeA,EAAWb,OAItBa,EAFAtC,OAAOa,KAAKP,SAKhBqB,QAAQ,SAAUe,GACrB,IAAII,EAAUxC,OAAOoC,GACrB1C,OAAOa,KAAKiC,GAASnB,QAAQ,SAAUC,GACrC,IAIMmB,EACAC,EALM,YAARpB,IAIEmB,EAAa,GAAGE,OAAOP,GAAWO,OAAOrB,EAAIsB,OAAO,GAAGC,eAAeF,OAAOrB,EAAIwB,UAAU,IAC3FJ,EAAO,GAAGC,OAAOP,EAAW,KAAKO,OAAOrB,GAE5Ce,EAAmBI,GAAc,SAAUM,GACzC,OAAOR,EAASxB,cAAc,CAC5B2B,KAAMA,GACLK,UAKJV,GAoBTW,MAAO,SAAeZ,GAEpB,IAAII,EAAUxC,OAAOoC,GACjB7B,EAAOb,OAAOa,KAAKiC,GACnBS,EAAe,GACnB1C,EAAKc,QAAQ,SAAUC,GACT,YAARA,IACF2B,EAAa3B,GAAOkB,EAAQlB,GAAK4B,mBAIrC,IAAIF,EAAQ,CAEVZ,UAAWA,EAEXe,QAAS,GACTlB,MAAOlB,cAAc,GAAIkC,GACzBG,gBAAiB,WACf,OAAOrC,cAAc,GAAIkC,IAG3BI,SAAU,CACRC,QAAS,SAAiBrB,EAAOsB,GAC3BC,EAAUD,EAAMC,QACpB,OAAOzC,cAAcA,cAAc,GAAIkB,GAAQuB,MAsDrD,OAjDAjD,EAAKc,QAAQ,SAAUC,GACT,YAARA,IAGF0B,EAAMG,QAAQ7B,GAAoBxB,aAAsB,QAAE2D,KAAK,SAASC,EAAQX,EAAQY,GACtF,IAAUC,EAAKC,EAA4BC,EAASC,EAAgBC,EAEpE,OAAOlE,aAAsB,QAAEmE,KAAK,SAAkBC,GACpD,OACE,OAAQA,EAASC,KAAOD,EAASE,MAC/B,KAAK,EAGH,OAFAC,EAAOV,EAAMU,KAAMT,EAAMD,EAAMC,IAC/BM,EAASE,KAAO,EACTC,EAAK7B,EAAQlB,GAAK+C,KAAMtB,GAEjC,KAAK,EAWH,GAVAc,EAAWK,EAASI,KAMpBC,EAAmB/B,EAAiB,QAAGsB,EAAUS,EAAiBT,QAASC,EAAiBQ,EAAiBR,eAAgBC,EAAUO,EAAiBP,QAIlJH,EAASC,KAAaC,EAM5B,OADAG,EAASE,KAAO,EACTR,EAAI,CACTlB,KAAM,UACNc,SAAS,EAAIvD,iBAA0B,SAAG,GAAIqB,EAAKuC,EAASG,MAP5DE,EAASE,KAAO,EAChB,MASJ,KAAK,EACH,OAAOF,EAASM,OAAO,SAAUX,GAEnC,KAAK,EACL,IAAK,MACH,OAAOK,EAASO,SAGrBf,QAIFV,GAQT0B,QAAS,SAAiBC,GACxB,IAAIC,EAAaD,EAAaE,IAAI,SAAUC,GAC1C,IAAI9B,EAAQjD,KAAKgF,SAASD,GACtB7B,EAAeD,GAAS,oBAAqBA,EAAQA,EAAMI,kBAAoB,GACnF,MAAO,CACLV,KAAM,GAAGC,OAAOmC,EAAa,YAC7B7B,aAAcA,KAGlB,OAAO,SAAUnB,EAAiBO,GAChC,OAAO,SAAU2C,GACf,OAAO,EAAI9E,OAAOwE,SAAS5C,EAAiBO,EAArC,CAAyD2C,EAAW,CACzEC,SAAS,EACTL,WAAYA,QAMtBhF,QAAiB,QAAI6B"}