{"version":3,"sources":["middleware/saga/serviceregister.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","Config","_regenerator","_objectWithoutProperties2","_defineProperty2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","_default","initConfig","config","mapStateToProps","_ref","_ref2","namespace","state","loading","global","mapDispatchToProps","_ref3","namespaces","dispatch","Service","methodName","concat","charAt","toUpperCase","substring","type","params","assign","model","effects","reducers","receive","_ref4","payload","mark","_callee","_ref5","_ref6","call","put","success","other","response","_Service$default","codeKey","codeSuccessKey","dataKey","wrap","_context","prev","next","sent","stop"],"mappings":"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","file":"serviceregister.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Config;\n/**\n * ServiceRegister\n * @class ServiceRegister\n * @classdesc 服务的注册\n * 1.自动生成数据流的mapDispatchToProps映射\n * 2.自动生成数据流的mapStateToProps映射\n * 3.自动生成数据流的Model\n */\n\nvar _default = {\n  /**\n   * initConfig - 服务注册初始化\n   * @param {Object} - config\n   * - namespace: service的实例\n   * property: model的namespace，也可以理解为模块名称\n   * value: value为Service的实例对象\n   */\n  initConfig: function initConfig(config) {\n    Config = config;\n  },\n\n  /**\n   * mapStateToProps - 自动生成mapStateToProps\n   * @param {String} - namespace\n   * @param {Object} - state 数据流的数据\n   * @return {Object} - mapStateToProps的映射\n   * 映射namespace到Props\n   * 映射loading到Props\n   */\n  mapStateToProps: function mapStateToProps(_ref) {\n    var _ref2;\n\n    var namespace = _ref.namespace,\n        state = _ref.state;\n    return _ref2 = {}, (0, _defineProperty2[\"default\"])(_ref2, namespace, state[namespace]), (0, _defineProperty2[\"default\"])(_ref2, \"loading\", state.loading.global), _ref2;\n  },\n\n  /**\n   * mapDispatchToProps - 自动生成mapDispatchToProps\n   * @param {Array<String>} - namespaces - 模块的集合\n   * @param {Function} - dispatch\n   * @return {Object} - mapDispatchToProps映射\n   */\n  mapDispatchToProps: function mapDispatchToProps(_ref3) {\n    var namespaces = _ref3.namespaces,\n        dispatch = _ref3.dispatch;\n    // service的实例\n    var mapDispatchToProps = {};\n    var keys = [];\n\n    if (!namespaces || !namespaces.length) {\n      // 如果不传递模块集合或者模块集合为空数组，则生成所有Service的方法隐射\n      keys = Object.keys(Config);\n    } else {\n      keys = namespaces;\n    }\n\n    keys.forEach(function (namespace) {\n      var Service = Config[namespace];\n      Object.keys(Service).forEach(function (key) {\n        // methodName是namespace + 接口方法名首字母大写\n        // 例子 namespace是todolist Service中有fetchList接口\n        // 则方法名为todolistFetchList\n        var methodName = \"\".concat(namespace).concat(key.charAt(0).toUpperCase()).concat(key.substring(1));\n        var type = \"\".concat(namespace, \"/\").concat(key); // params必须是对象且只有一个对象\n\n        mapDispatchToProps[methodName] = function (params) {\n          return dispatch(Object.assign({\n            type: type\n          }, params));\n        };\n      });\n    });\n    return mapDispatchToProps;\n  },\n\n  /**\n   * model - 生成Service对应的Model\n   * @param {String} - namespace\n   * @return {Object} - Model\n   * 此方默认处理Service中的所有接口，默认生成的Effect只调用接口，\n   * 把接口返回值注入到以方法名为Key，返回的dataKey为数据的数据流中，且在model的namespace键中创建\n   * 例如：\n   * 假定model的namsespace为todolist\n   * Service中有ferchList方法\n   * Model的处理为\n   * 1.调用fetchList\n   * 2.将返回值放入 {\n   *    todolist:{\n   *      fetchList: 数据\n   *    }\n   * }\n   */\n  model: function model(namespace) {\n    // service的实例\n    var Service = Config[namespace]; // 模型\n\n    var model = {\n      // namespace\n      namespace: namespace,\n      // effects\n      effects: {},\n      // reducers\n      reducers: {\n        receive: function receive(state, _ref4) {\n          var payload = _ref4.payload;\n          return _objectSpread({}, state, {}, payload);\n        }\n      }\n    }; // 所有除了default\n\n    Object.keys(Service).forEach(function (key) {\n      if (key !== 'default') {\n        // params是调用mapDispatchToProps的参数\n        // success是回调函数\n        model.effects[key] = /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref5, _ref6) {\n          var call, put, success, other, response, _Service$default, codeKey, codeSuccessKey, dataKey;\n\n          return _regenerator[\"default\"].wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  call = _ref6.call, put = _ref6.put;\n                  success = _ref5.success, other = (0, _objectWithoutProperties2[\"default\"])(_ref5, [\"success\"]);\n                  _context.next = 4;\n                  return call(Service[key], other);\n\n                case 4:\n                  response = _context.sent;\n                  // Service中的默认导出必须有的键\n                  // codeKey为状态域\n                  // codeSuccessKey为状态域中成功标识\n                  // dataKey为数据域\n                  _Service$default = Service[\"default\"], codeKey = _Service$default.codeKey, codeSuccessKey = _Service$default.codeSuccessKey, dataKey = _Service$default.dataKey;\n\n                  if (!(response[codeKey] === codeSuccessKey)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  if (success) {\n                    success();\n                  } // 向数据流里放入Service的方法名为key,response[dataKey]为值的数据\n\n\n                  _context.next = 10;\n                  return put({\n                    type: 'receive',\n                    payload: (0, _defineProperty2[\"default\"])({}, key, response[dataKey])\n                  });\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        });\n      }\n    });\n    return model;\n  }\n};\nexports[\"default\"] = _default;"]}